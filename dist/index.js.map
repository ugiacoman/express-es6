{"version":3,"sources":["../src/index.js"],"names":["debug","require","app","disable","use","set","join","__dirname","skip","get","json","urlencoded","extended","req","res","next","render","title","err","Error","status","message","PORT","process","env","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,QAAQC,QAAQ,OAAR,EAAiB,KAAjB,CAAd;;AAEA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,OAAJ,CAAY,cAAZ;AACAD,IAAIE,GAAJ,CAAQ,4BAAR;AACAF,IAAIG,GAAJ,CAAQ,OAAR,EAAiB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAjB;AACAL,IAAIG,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEAH,IAAIE,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBI,QAAM,MAAMN,IAAIO,GAAJ,CAAQ,KAAR,MAAmB;AADX,CAAd,CAAR;AAGAP,IAAIE,GAAJ,CAAQ,qBAAWM,IAAX,EAAR;AACAR,IAAIE,GAAJ,CAAQ,qBAAWO,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;;AAEAV,IAAIE,GAAJ,CAAQ,OAAR;;AAEAF,IAAIO,GAAJ,CAAQ,GAAR,EAAa,CAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/BD,MAAIE,MAAJ,CAAW,OAAX,EAAoB,EAAEC,OAAO,sBAAT,EAApB;AACD,CAFD;;AAIAf,IAAIE,GAAJ,CAAQ,CAACS,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1B,QAAMG,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAL,OAAKG,GAAL;AACD,CAJD;;AAMAhB,IAAIE,GAAJ,CAAQ,CAACc,GAAD,EAAML,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAAE;AACjCD,MACGM,MADH,CACUF,IAAIE,MAAJ,IAAc,GADxB,EAEGJ,MAFH,CAEU,OAFV,EAEmB;AACfK,aAASH,IAAIG;AADE,GAFnB;AAKD,CAND;;AAQA,MAAM,EAAEC,OAAO,IAAT,KAAkBC,QAAQC,GAAhC;AACAtB,IAAIuB,MAAJ,CAAWH,IAAX,EAAiB,MAAMtB,MAAO,qBAAoBsB,IAAK,EAAhC,CAAvB","file":"index.js","sourcesContent":["import express from 'express'\nimport logger from 'morgan'\nimport path from 'path'\nimport bodyParser from 'body-parser'\nimport compression from 'compression'\nimport apiRoutes from './routes/api'\n\nconst debug = require('debug')('dev')\n\nconst app = express()\napp.disable('x-powered-by')\napp.use(compression())\napp.set('views', path.join(__dirname, '../views'))\napp.set('view engine', 'pug')\n\napp.use(logger('dev', {\n  skip: () => app.get('env') === 'test'\n}))\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\n\napp.use('/api/', apiRoutes)\n\napp.get('/', (req, res, next) => {\n  res.render('index', { title: 'Alertness Pro Server' })\n})\n\napp.use((req, res, next) => {\n  const err = new Error('Not Found')\n  err.status = 404\n  next(err)\n})\n\napp.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n  res\n    .status(err.status || 500)\n    .render('error', {\n      message: err.message\n    })\n})\n\nconst { PORT = 8080 } = process.env\napp.listen(PORT, () => debug(`Listening on port ${PORT}`))\n"]}